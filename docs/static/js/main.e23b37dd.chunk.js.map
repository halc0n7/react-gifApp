{"version":3,"sources":["Component/AppCategory.js","helpers/getGifs.js","Component/GifGridItem.js","Component/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AppCategory","setCategories","useState","ImpuValue","setImpuValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAErCC,EAFqC,KAE1BC,EAF0B,KAiB5C,OAEI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAUK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAgBO,OAClCN,EAAa,OAQb,2BACIO,KAAK,OACLC,MAAST,EACTU,SAnBc,SAACP,GAEvBF,EAAaE,EAAEQ,OAAOF,Y,uBCRjBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EAC9B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXf,kBAchBM,GAdgB,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,uBAAGI,UAAU,oCAAqCJ,KCFhDO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDb,SAACA,GAAY,IAAD,EAEZd,mBAAS,CAE/BqB,KAAK,GACLa,SAAS,IALyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA6BjC,OArBLC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GAELC,YAAY,WAEPC,QAAQC,IAAIH,GACZH,EAAS,CACPf,KAAKkB,EACLL,SAAQ,MAGhB,UAKN,CAACpB,IAISqB,EDzBoBQ,CAAa7B,GAAhCa,EAH0B,EAG/BN,KAAaa,EAHkB,EAGlBA,QAGjB,OACI,oCACK,4BAAKpB,GAGV,yBAAKgB,UAAU,aAGPI,GAAW,uBAAGJ,UAAU,oCAAb,WAIPH,EAAOJ,KAAK,SAAAC,GAAG,OACd,kBAAC,EAAD,eACIoB,IAAKpB,EAAIC,IACLD,UEpBhBqB,EAAe,WAAM,MAIM7C,mBAAS,CAAC,cAJhB,mBAIvB8C,EAJuB,KAIX/C,EAJW,KAuB9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAES+C,EAAWvB,KAAI,SAAAT,GAAQ,OACvB,kBAAC,EAAD,CACA8B,IAAK9B,EACLA,SAAUA,U,MChC/BiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e23b37dd.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AppCategory = ({setCategories}) => {\r\n\r\n    const [ImpuValue, setImpuValue] = useState('')\r\n\r\n    const handleInputChange = (e)=>{ //para extraer el nuevo valor en la caja de comentario\r\n        \r\n        setImpuValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e)=>{ //para enviar el nuevo texto q escribimos\r\n        e.preventDefault(); //para prevenir el comportamiento del form de refrescar toda la pagina\r\n         if(ImpuValue.trim().length>2){\r\n            setCategories(cats=>[ImpuValue,...cats]);\r\n            setImpuValue('');\r\n         }\r\n        \r\n       \r\n    }\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value = {ImpuValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>  \r\n        \r\n    )\r\n}\r\n\r\nAppCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CgtYH9dfKf0N5y6td4NshtLFO6il5zMW`\r\n    \r\n    const resp= await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n\r\n    const gifs = data.map(img=>{\r\n return {\r\n     id:img.id,\r\n     title:img.title,\r\n     url:img.images?.downsized_medium.url\r\n }\r\n} )\r\nreturn gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n   // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n           <img src={url} alt={title}/>\r\n           <p className='animate__animated animate__jello' >{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n          \r\n \r\n const {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n             <h3>{category}</h3>\r\n\r\n             \r\n        <div className=\"card-grid\">\r\n               \r\n\r\n               {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n            \r\n            \r\n                {\r\n                    images.map( img=>(\r\n                     <GifGridItem \r\n                         key={img.id}\r\n                         {...img}\r\n                     />\r\n                    ))\r\n                }\r\n            \r\n            \r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}  \r\n\r\n","\r\nimport {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\nconst [state, setState] = useState({\r\n\r\n    data:[],\r\n    loading: true\r\n});\r\n\r\nuseEffect( () => {\r\n    getGifs(category)\r\n        .then(imgs => {\r\n\r\n         setTimeout( () => {\r\n\r\n              console.log(imgs);\r\n              setState({\r\n                data:imgs,\r\n                loading:false\r\n            });\r\n\r\n     }, 3000);\r\n\r\n           \r\n   })\r\n\r\n},[category])\r\n\r\n\r\n\r\n     return state //{data:[],  loading:true};\r\n\r\n}","import React, { useState } from 'react'\r\nimport {AppCategory} from './Component/AppCategory';\r\nimport { GifGrid } from './Component/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   \r\n   // vamos a usar el hook del useState para añadir un elemento en mis categorias ya no usamos el const categories =[]\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n    \r\n    \r\n    \r\n   \r\n   \r\n   \r\n   \r\n   //1 const handleApp = ()=>{\r\n       //1 setCategories([...categories,'HunterXHunter']); //uso el operador expret... para añadir una nueva caterogia a mi arreglo\r\n   //1       setCategories(cats=>[...categories,'HunterXHunter']); //uso un callback en el cual el primer argumento cats es el valor del estado anterior y luego tiene q regresar el nuevo estado , en este caso un nuevo arreglo con los valores anteriores mas el nuevo elemento HunterXHunter  \r\n   //1 }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AppCategory setCategories={setCategories} />\r\n            <hr />\r\n            \r\n            <ol>\r\n                {\r\n                     categories.map(category=>(\r\n                     <GifGrid \r\n                     key={category}\r\n                     category={category} />\r\n                     ) )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// crear un componente llamado Gif ExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />\n"],"sourceRoot":""}